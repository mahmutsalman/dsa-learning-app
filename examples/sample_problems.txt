# Title: Two Sum
# Difficulty: Easy
# Topics: Array, Hash Table
# Tags: leetcode, beginner, interview-prep
# LeetCode URL: https://leetcode.com/problems/two-sum/
# Description:
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

# Constraints:
- 2 <= nums.length <= 10^4
- -10^9 <= nums[i] <= 10^9  
- -10^9 <= target <= 10^9
- Only one valid answer exists

# Hints:
- A really brute force way would be to search for all possible pairs of numbers but that would be too slow
- Again, the best way to approach this problem is with a HashMap or Dictionary
- Use a hash table to store the numbers you've seen so far and their indices

---

# Title: Valid Parentheses
# Difficulty: Easy
# Topics: String, Stack
# Tags: leetcode, stack, string-processing
# Description:
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
1. Open brackets must be closed by the same type of brackets
2. Open brackets must be closed in the correct order
3. Every close bracket has a corresponding open bracket of the same type

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

# Constraints:
- 1 <= s.length <= 10^4
- s consists of parentheses only '()[]{}'

# Hints:
- Use a stack data structure to keep track of opening brackets
- When you encounter an opening bracket, push it onto the stack
- When you encounter a closing bracket, check if it matches the most recent opening bracket
- If the stack is empty at the end, all brackets were properly closed

---

# Title: Longest Substring Without Repeating Characters
# Difficulty: Medium
# Topics: Hash Table, String, Sliding Window
# Tags: leetcode, sliding-window, hash-table, string
# LeetCode URL: https://leetcode.com/problems/longest-substring-without-repeating-characters/
# Description:
Given a string s, find the length of the longest substring without repeating characters.

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.

# Constraints:
- 0 <= s.length <= 5 * 10^4
- s consists of English letters, digits, symbols and spaces

# Hints:
- Use the sliding window technique with two pointers
- Keep track of characters you've seen in the current window using a hash set or hash map
- When you encounter a repeated character, move the left pointer to eliminate the repetition
- Keep track of the maximum window size seen so far

---

# Title: Merge Two Sorted Lists
# Difficulty: Easy
# Topics: Linked List, Recursion
# Tags: leetcode, linked-list, recursion, merge
# Description:
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: list1 = [], list2 = []
Output: []

Example 3:
Input: list1 = [], list2 = [0]
Output: [0]

# Constraints:
- The number of nodes in both lists is in the range [0, 50]
- -100 <= Node.val <= 100
- Both list1 and list2 are sorted in non-decreasing order

# Hints:
- You can solve this iteratively or recursively
- For the iterative approach, use a dummy node to simplify edge cases
- Compare the values of the current nodes and choose the smaller one
- Don't forget to handle the case where one list is exhausted before the other

---